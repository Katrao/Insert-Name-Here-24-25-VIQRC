{"mode":"Text","hardwareTarget":"brain","textContent":"# ----------------------------------------------\n# |                                            |\n# | Project:      PIDTestingINH                |\n# | Author:       Team 32092D Insert Name Here |\n# | Version:      V1.0                         |\n# | Season:       2024-25 Rapid Relay          |\n# |                                            |\n# ----------------------------------------------\n\nfrom vex import *\n\nbrain = Brain()\n\ninertial = Inertial()\ncontroller = Controller()\n\nleftDrive = Motor(Ports.PORT5, 1.6666666666666667, False)\nrightDrive = Motor(Ports.PORT6, 1.6666666666666667, True)\ndrivetrain = SmartDrive(leftDrive, rightDrive, inertial, 200)\n\nintake = Motor(Ports.PORT10, False)\n\nflywheela = Motor(Ports.PORT9, True)\nflywheelb = Motor(Ports.PORT4, False)\nflywheel = MotorGroup(flywheela, flywheelb)\n\nsolenoid = Pneumatic(Ports.PORT7)\nsolenoid.pump_on()\n\ndrivetrain.set_turn_velocity(65, PERCENT)\nintake.set_velocity(100, PERCENT)\nintake.set_max_torque(100, PERCENT)\nflywheel.set_velocity(100, PERCENT)\nflywheel.set_max_torque(100, PERCENT)\n\nvexCalibrationCompleted = False\n\ndef calibrateDrivetrain():\n    global vexCalibrationCompleted\n    sleep(200, MSEC)\n    brain.screen.print(\"Calibrating\")\n    brain.screen.next_row()\n    brain.screen.print(\"Inertial\")\n    inertial.calibrate()\n    while inertial.is_calibrating():\n        sleep(25, MSEC)\n    inertial.set_heading(0, DEGREES)\n    vexCalibrationCompleted = True\n    brain.screen.clear_screen()\n    brain.screen.set_cursor(1, 1)\n\ncalibrateDrivetrain()\n\ndef fire():\n    solenoid.extend(CYLINDER1)\n    solenoid.extend(CYLINDER2)\n    wait(1, SECONDS)\n    solenoid.retract(CYLINDER2)\n    solenoid.retract(CYLINDER1)\ndef extendIndexer():\n    solenoid.extend(CYLINDER1)\n    solenoid.extend(CYLINDER2)\ndef retractIndexer():\n    solenoid.retract(CYLINDER2)\n    solenoid.retract(CYLINDER1)\n\nkP = 0\nkI = 0\nkD = 0\ns = 50\nsv = 0\ner = 0\nerPrv = 0\nmv = 50\nlD = mv\nrD = mv\ni = 0\n\nleftDrive.set_velocity(lD, PERCENT)\nrightDrive.set_velocity(rD, PERCENT)\n\n#In use: Proportional, Integral\ndrivetrain.drive(FORWARD)\nwhile True:\n    cv = inertial.heading()\n    if cv < 0:\n        cv -= 360\n    er = -1 * (sv-cv)\n    kP = er/(s-48)\n    kIAdj = s+(i/(s-30))\n    kI += er\n    kD = (er-erPrv)/0.02\n    adj = kP*((kI/kIAdj) + (kD*(s-40)))\n    if er < 0:\n        adj *= -1    \n        rDAdj = adj - (mv - lD)\n        lDAdj = adj - rDAdj\n        lD += lDAdj\n        rD -= rDAdj\n        leftDrive.set_velocity(lD, PERCENT)\n        rightDrive.set_velocity(rD, PERCENT)\n    elif er > 0:\n        lDAdj = adj - (mv - rD)\n        rDAdj = adj - lDAdj\n        rD += rDAdj\n        lD -= lDAdj\n        leftDrive.set_velocity(lD, PERCENT)\n        rightDrive.set_velocity(rD, PERCENT)\n    i += 1\n    erprv = er\n","textLanguage":"python","robotConfig":[],"slot":0,"platform":"IQ","sdkVersion":"20230818.11.00.00","appVersion":"4.0.8","minVersion":"3.0.0","fileFormat":"2.0.0","targetBrainGen":"Second","v5SoundsEnabled":false,"target":"Physical"}