{"mode":"Text","hardwareTarget":"brain","textContent":"# ----------------------------------------------\n# |                                            |\n# | Project:      DriverINH                    |\n# | Author:       Team 32092D Insert Name Here |\n# | Version:      V5.0                         |\n# | Season:       2024-25 Rapid Relay          |\n# |                                            |\n# ----------------------------------------------\n\nfrom vex import *\n\nbrain=Brain()\n\ninertial = Inertial()\ncontroller = Controller()\n\nleftDrive = Motor(Ports.PORT5, 1.6666666666666667, False)\nrightDrive = Motor(Ports.PORT6, 1.6666666666666667, True)\ndrivetrain = SmartDrive(leftDrive, rightDrive, inertial, 200)\n\nintake = Motor(Ports.PORT10, False)\n\nflywheela = Motor(Ports.PORT9, True)\nflywheelb = Motor(Ports.PORT4, False)\nflywheel = MotorGroup(flywheela, flywheelb)\n\nsolenoid = Pneumatic(Ports.PORT7)\nsolenoid.pump_on()\n\ndrivetrain.set_drive_velocity(100, PERCENT)\ndrivetrain.set_turn_velocity(65, PERCENT)\nintake.set_velocity(100, PERCENT)\nintake.set_max_torque(100, PERCENT)\nflywheel.set_velocity(100, PERCENT)\nflywheel.set_max_torque(100, PERCENT)\n\nvexCalibrationCompleted = False\n\ndef calibrateDrivetrain():\n    global vexCalibrationCompleted\n    sleep(200, MSEC)\n    brain.screen.print(\"Calibrating\")\n    brain.screen.next_row()\n    brain.screen.print(\"Inertial\")\n    inertial.calibrate()\n    while inertial.is_calibrating():\n        sleep(25, MSEC)\n    vexCalibrationCompleted = True\n    brain.screen.clear_screen()\n    brain.screen.set_cursor(1, 1)\n\ncalibrateDrivetrain()\n\ndef fire():\n    solenoid.extend(CYLINDER1)\n    solenoid.extend(CYLINDER2)\n    wait(1, SECONDS)\n    solenoid.retract(CYLINDER2)\n    solenoid.retract(CYLINDER1)\ndef extendIndexer():\n    solenoid.extend(CYLINDER1)\n    solenoid.extend(CYLINDER2)\ndef retractIndexer():\n    solenoid.retract(CYLINDER2)\n    solenoid.retract(CYLINDER1)\n\ncontroller.buttonRUp.pressed(fire())\ncontroller.buttonFUp.pressed(extendIndexer())\ncontroller.buttonFDown.pressed(retractIndexer())\n\nintakeStopped = True\nflywheelsStoppedPrimary = True\nflywheelsStoppedSecondary = True\ndrivetrainLNeedsStopping = False\ndrivetrainRNeedsStopping = False\n\ndef driveController():\n    global drivetrainLNeedsStopping, drivetrainRNeedsStopping, intakeStopped, flywheelsStoppedPrimary, flywheelsStoppedSecondary, rcEnabled\n    while True:\n        if rcEnabled:\n            drivetrainLSpeed = controller.axisA.position() + controller.axisC.position()\n            drivetrainRSpeed = controller.axisA.position() - controller.axisC.position()\n            \n            if drivetrainLSpeed < 5 and drivetrainLSpeed > -5:\n                if drivetrainLNeedsStopping:\n                    leftDrive.stop()\n                    drivetrainLNeedsStopping = False\n            else:\n                drivetrainLNeedsStopping = True\n\n            if drivetrainRSpeed < 5 and drivetrainRSpeed > -5:\n                if drivetrainRNeedsStopping:\n                    rightDrive.stop()\n                    drivetrainRNeedsStopping = False\n            else:\n                drivetrainRNeedsStopping = True\n            \n            if drivetrainLNeedsStopping:\n                leftDrive.set_velocity(drivetrainLSpeed, PERCENT)\n                leftDrive.spin(FORWARD)\n\n            if drivetrainRNeedsStopping:\n                rightDrive.set_velocity(drivetrainRSpeed, PERCENT)\n                rightDrive.spin(FORWARD)\n\n            if controller.buttonLUp.pressing():\n                intake.spin(FORWARD)\n                intakeStopped = False\n            elif controller.buttonLDown.pressing():\n                intake.spin(REVERSE)\n                intakeStopped = False\n            elif not intakeStopped:\n                intake.stop()\n                intakeStopped = True\n\n            if controller.buttonRDown.pressing():\n                flywheel.spin(REVERSE)\n                flywheelsStoppedPrimary = False\n            elif not flywheelsStoppedPrimary:\n                flywheel.stop()\n                flywheelsStoppedPrimary = True\n            \n            if controller.buttonEUp.pressing():\n                flywheel.spin(FORWARD)\n                flywhelsStoppedSecondary = False\n            elif controller.buttonEDown.pressing():\n                flywheel.spin(REVERSE)\n                flywheelsStoppedSecondary = False\n            elif not flywheelsStoppedSecondary:\n                flywheel.stop()\n                flywheelsStoppedSecondary = True\n        wait(20, MSEC)\n\nrcEnabled = True\n\nrc_auto_loop_thread_controller = Thread(driveController)","textLanguage":"python","robotConfig":[{"port":[8],"name":"solenoid","customName":true,"deviceType":"Pneumatic","deviceClass":"pneumatic","setting":{"cylinder1":"cylinder1","cylinder2":"cylinder2","cylinder1_reversed":"false","cylinder2_reversed":"false","cylinder3":"","cylinder4":""},"triportSourcePort":22}],"slot":0,"platform":"IQ","sdkVersion":"20230818.11.00.00","appVersion":"4.0.8","fileFormat":"2.0.0","targetBrainGen":"Second","v5SoundsEnabled":false}