{"mode":"Text","hardwareTarget":"brain","textContent":"# ----------------------------------------------\n# |                                            |\n# | Project:      DriverINH                    |\n# | Author:       Team 32092D Insert Name Here |\n# | Version:      V3.1                         |\n# | Season:       2024-25 Rapid Relay          |\n# |                                            |\n# ----------------------------------------------\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\nbrain_inertial = Inertial()\ncontroller = Controller()\n\nleftdrive = Motor(Ports.PORT5, 1.6666666666666667, False)\nrightdrive = Motor(Ports.PORT6, 1.6666666666666667, True)\ndrivetrain = SmartDrive(leftdrive, rightdrive, brain_inertial, 200)\n\nintake = Motor(Ports.PORT11, False)\n\nflywheela = Motor(Ports.PORT10, False)\nflywheelb = Motor(Ports.PORT4, True)\nflywheel = MotorGroup(flywheela, flywheelb)\n\nlift = Motor(Ports.PORT2, True)\n\ndrivetrain.set_drive_velocity(100, PERCENT)\ndrivetrain.set_turn_velocity(65, PERCENT)\nintake.set_velocity(100, PERCENT)\nintake.set_max_torque(100, PERCENT)\nflywheel.set_velocity(100, PERCENT)\nflywheel.set_max_torque(100, PERCENT)\nlift.set_velocity(100, PERCENT)\nlift.set_max_torque(100, PERCENT)\nlift.set_stopping(BRAKE)\n\n# generating and setting random seed\ndef initializeRandomSeed():\n    wait(100, MSEC)\n    xaxis = brain_inertial.acceleration(XAXIS) * 1000\n    yaxis = brain_inertial.acceleration(YAXIS) * 1000\n    zaxis = brain_inertial.acceleration(ZAXIS) * 1000\n    systemTime = brain.timer.system() * 100\n    urandom.seed(int(xaxis + yaxis + zaxis + systemTime)) \n    \n# Initialize random seed \ninitializeRandomSeed()\n\nvexcode_initial_drivetrain_calibration_completed = False\ndef calibrate_drivetrain():\n    # Calibrate the Drivetrain Inertial\n    global vexcode_initial_drivetrain_calibration_completed\n    sleep(200, MSEC)\n    brain.screen.print(\"Calibrating\")\n    brain.screen.next_row()\n    brain.screen.print(\"Inertial\")\n    brain_inertial.calibrate()\n    while brain_inertial.is_calibrating():\n        sleep(25, MSEC)\n    vexcode_initial_drivetrain_calibration_completed = True\n    brain.screen.clear_screen()\n    brain.screen.set_cursor(1, 1)\n\n\n# Calibrate the Drivetrain\ncalibrate_drivetrain()\n\n\n\n# define variables used for controlling motors based on controller inputs\ncontroller_left_shoulder_control_motors_stopped = True\ncontroller_right_shoulder_control_motors_stopped = True\ne_buttons_control_motors_stopped = True\ndrivetrain_l_needs_to_be_stopped_controller = False\ndrivetrain_r_needs_to_be_stopped_controller = False\n\n# define a task that will handle monitoring inputs from controller\ndef rc_auto_loop_function_controller():\n    global drivetrain_l_needs_to_be_stopped_controller, drivetrain_r_needs_to_be_stopped_controller, controller_left_shoulder_control_motors_stopped, controller_right_shoulder_control_motors_stopped, e_buttons_control_motors_stopped, remote_control_code_enabled\n    # process the controller input every 20 milliseconds\n    # update the motors based on the input values\n    while True:\n        if remote_control_code_enabled:\n            \n            # calculate the drivetrain motor velocities from the controller joystick axies\n            # left = axisA + axisC\n            # right = axisA - axisC\n            drivetrain_left_side_speed = controller.axisA.position() + controller.axisC.position()\n            drivetrain_right_side_speed = controller.axisA.position() - controller.axisC.position()\n            \n            # check if the value is inside of the deadband range\n            if drivetrain_left_side_speed < 5 and drivetrain_left_side_speed > -5:\n                # check if the left motor has already been stopped\n                if drivetrain_l_needs_to_be_stopped_controller:\n                    # stop the left drive motor\n                    leftdrive.stop()\n                    # tell the code that the left motor has been stopped\n                    drivetrain_l_needs_to_be_stopped_controller = False\n            else:\n                # reset the toggle so that the deadband code knows to stop the left motor next\n                # time the input is in the deadband range\n                drivetrain_l_needs_to_be_stopped_controller = True\n            # check if the value is inside of the deadband range\n            if drivetrain_right_side_speed < 5 and drivetrain_right_side_speed > -5:\n                # check if the right motor has already been stopped\n                if drivetrain_r_needs_to_be_stopped_controller:\n                    # stop the right drive motor\n                    rightdrive.stop()\n                    # tell the code that the right motor has been stopped\n                    drivetrain_r_needs_to_be_stopped_controller = False\n            else:\n                # reset the toggle so that the deadband code knows to stop the right motor next\n                # time the input is in the deadband range\n                drivetrain_r_needs_to_be_stopped_controller = True\n            \n            # only tell the left drive motor to spin if the values are not in the deadband range\n            if drivetrain_l_needs_to_be_stopped_controller:\n                leftdrive.set_velocity(drivetrain_left_side_speed, PERCENT)\n                leftdrive.spin(FORWARD)\n            # only tell the right drive motor to spin if the values are not in the deadband range\n            if drivetrain_r_needs_to_be_stopped_controller:\n                rightdrive.set_velocity(drivetrain_right_side_speed, PERCENT)\n                rightdrive.spin(FORWARD)\n            # check the buttonLUp/buttonLDown status\n            # to control intake\n            if controller.buttonLUp.pressing():\n                intake.spin(FORWARD)\n                controller_left_shoulder_control_motors_stopped = False\n            elif controller.buttonLDown.pressing():\n                intake.spin(REVERSE)\n                controller_left_shoulder_control_motors_stopped = False\n            elif not controller_left_shoulder_control_motors_stopped:\n                intake.stop()\n                # set the toggle so that we don't constantly tell the motor to stop when\n                # the buttons are released\n                controller_left_shoulder_control_motors_stopped = True\n            # check the buttonRUp/buttonRDown status\n            # to control flywheel\n            if controller.buttonRUp.pressing():\n                flywheel.spin(FORWARD)\n                controller_right_shoulder_control_motors_stopped = False\n            elif controller.buttonRDown.pressing():\n                flywheel.spin(REVERSE)\n                controller_right_shoulder_control_motors_stopped = False\n            elif not controller_right_shoulder_control_motors_stopped:\n                flywheel.stop()\n                # set the toggle so that we don't constantly tell the motor to stop when\n                # the buttons are released\n                controller_right_shoulder_control_motors_stopped = True\n            # check the buttonEUp/buttonEDown status\n            # to control lift\n            if controller.buttonEUp.pressing():\n                lift.spin(FORWARD)\n                e_buttons_control_motors_stopped = False\n            elif controller.buttonEDown.pressing():\n                lift.spin(REVERSE)\n                e_buttons_control_motors_stopped = False\n            elif not e_buttons_control_motors_stopped:\n                lift.stop()\n                # set the toggle so that we don't constantly tell the motor to stop when\n                # the buttons are released\n                e_buttons_control_motors_stopped = True\n        # wait before repeating the process\n        wait(20, MSEC)\n\n# define variable for remote controller enable/disable\nremote_control_code_enabled = True\n\nrc_auto_loop_thread_controller = Thread(rc_auto_loop_function_controller)","textLanguage":"python","robotConfig":[],"slot":0,"platform":"IQ","sdkVersion":"20230818.11.00.00","appVersion":"4.0.7","fileFormat":"2.0.0","targetBrainGen":"Second","v5SoundsEnabled":false}